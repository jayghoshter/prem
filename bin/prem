#!/usr/bin/env python3

from prem import PDF
from prem.sources import CrossRef, arXiv
from prem.utils import generic_open_linux, fetch_bibliography, input_with_prefill
from prem import logger
import argparse
import re
from pyfzf.pyfzf import FzfPrompt
import plumbum
import click
from types import SimpleNamespace

def check_id_in_metadata_and_text(pdf, sources, auto=False):
    ids_in_mdata = list(map(lambda s: pdf.find_in_metadata(s.identifier_regex_compiled), sources))

    mods = map(lambda s: (lambda x:x[::-1]) if 'arXiv' in s.__name__ else None, sources)
    ids_in_text = list(map(lambda s, mod: pdf.find_in_text(s.identifier_regex_compiled, mod=mod), sources, mods))

    ids_total = list(map(lambda idm, idt: list(set(idm + idt)) , ids_in_mdata, ids_in_text))

    if any(ids_total):
        for source,ids in zip(sources, ids_total):
            if ids:
                logger.print(f"Found {source.identifier_name}: {ids} in file metadata/text", indent_level=1)

    # NOTE: Assumes first matched ID for each source is the only valid one
    if not auto and any(ids_total):
        ids_total_flat = list(map(
            lambda sources, ids: input_with_prefill(f"Correct {sources.identifier_name} id: ", ids[0] if ids else '', indent_level=1), 
            sources, 
            ids_total))
    else: 
        ids_total_flat = list(map(lambda ids: ids[0] if ids else None, ids_total))

    mdatas = list(map(lambda s, ids: s.fetch_and_parse(ids) if ids else {}, 
                 sources, 
                 ids_total_flat))

    if any(mdatas):
        for mdata in mdatas: 
            if mdata:
                pdf.update_metadata(mdata)
        pdf.rename()
        return True
    else:
        return False

def check_id_in_metadata(pdf, sources):
    ids_in_mdata = list(map(lambda s: pdf.find_in_metadata(s.identifier_regex_compiled), sources))

    if any(ids_in_mdata):
        for source,ids in zip(sources, ids_in_mdata):
            if ids:
                logger.print(f"Found {source.identifier_name}: {ids} in file metadata", indent_level=1)

    # NOTE: Assumes first matched ID for each source is the only valid one
    mdatas = list(map(lambda s, ids: s.fetch_and_parse(ids[0]) if ids else {}, 
                 sources, 
                 ids_in_mdata))

    if any(mdatas):
        for mdata in mdatas: 
            if mdata: 
                pdf.update_metadata(mdata)
        pdf.rename()
        return True
    else:
        return False

def check_id_in_text(pdf, sources, auto=False):
    mods = map(lambda s: (lambda x:x[::-1]) if 'arXiv' in s.__name__ else None, sources)
    ids_in_text = list(map(lambda s, mod: pdf.find_in_text(s.identifier_regex_compiled, mod=mod), sources, mods))

    if any(ids_in_text):
        for source,ids in zip(sources, ids_in_text):
            if ids:
                logger.print(f"Found {source.identifier_name}: {ids} in file metadata", indent_level=1)

    # NOTE: Assumes first matched ID for each source is the only valid one
    if not auto and any(ids_in_text):
        ids_in_text_flat = list(map(
            lambda sources, ids: input_with_prefill(f"Correct {sources.identifier_name} id: ", ids[0] if ids else ''), 
            sources, 
            ids_in_text))
    else: 
        ids_in_text_flat = list(map(lambda ids: ids[0] if ids else None, ids_in_text))

    mdatas = list(map(lambda s, ids: s.fetch_and_parse(ids) if ids else {}, 
                 sources, 
                 ids_in_text_flat))

    if any(mdatas):
        for mdata in mdatas: 
            if mdata:
                pdf.update_metadata(mdata)
        pdf.rename()
        return True
    else:
        return False

def manual_query(pdf, source):
    fzf = FzfPrompt()
    FZF_FILE_OPTS =  '--cycle --bind="ctrl-x:execute@xdg-open {}@" --bind="ctrl-y:execute@echo {} | xclip -i -selection clipboard@"'

    header = """
# Manual query mode. 
# Please input the query text for crossref. It may be a partial title with or without author names.
# Only 120 characters from the first line are used in the query.
# The text extracted from the PDF follows for reference.

    """
    text = pdf.pages_to_text(3)
    pdf_process = generic_open_linux(pdf.filename)
    querystr = click.edit(header + text)
    if querystr: 
        querystr = querystr.split('\n')[0]
        querystr = querystr.encode('ascii', 'ignore')
        querystr = re.sub(r'[\-:\.\?,\s]+', '+', str(querystr))
        if len(querystr) > 120:
            querystr = querystr[:120]
        crossref_matches = source.query(querystr)
        crossref_matches_processed = list(map(source.parse, crossref_matches))
        crossref_identifiers = list(map(lambda x: f"{x['prem:year']} - {x['prem:author']} - {x['prem:title']}", crossref_matches_processed))
        selected = fzf.prompt(crossref_identifiers, f"{FZF_FILE_OPTS} --header=\"{pdf.filename} - {querystr.replace('+', ' ')}\"")
        if selected:
            selected = selected[0]
            selected_index = crossref_identifiers.index(selected)
            pdf.update_metadata( crossref_matches_processed[selected_index] )
            pdf.rename()
    pdf_process.kill()

def driver(fname, **kwargs):
    logger.print(f"Processing: [bold magenta]{fname}[/bold magenta]")
    kwargs = SimpleNamespace(**kwargs)
    pdf = PDF(fname, name_template=kwargs.name_template)

    if kwargs.mode == 'classic': 
        logger.print("Looking for IDs in file metadata.", indent_level=1)
        if not check_id_in_metadata(pdf, kwargs.sources):
            logger.warn("Couldn't find IDs in pdf metadata. Looking in text.", indent_level=1)
            if not check_id_in_text(pdf, kwargs.sources, kwargs.auto):
                logger.warn(f"Couldn't find IDs in pdf text.", indent_level=1)
                if not kwargs.auto: 
                    logger.warn(f"Manual input required!", indent_level=2)
                    manual_query(pdf, CrossRef)
    elif kwargs.mode == 'complete':
        logger.print("Looking for IDs in pdf metadata and text.", indent_level=1)
        if not check_id_in_metadata_and_text(pdf, kwargs.sources, kwargs.auto):
            logger.warn(f"Couldn't find IDs in pdf metadata or text.", indent_level=1)
            if not kwargs.auto: 
                logger.warn(f"Manual input required!", indent_level=2)
                manual_query(pdf, CrossRef)

    # NOTE: Only works with DOI
    if dois := pdf.match_metadata_fields('doi'):
        if kwargs.bib and dois:
            with open(kwargs.bib, 'a') as bibfile:
                bibfile.write(fetch_bibliography(list(dois.values())[0]))

def main():

    ap = argparse.ArgumentParser()

    ap.add_argument("files", nargs = '*', help="PDF files to operate on")
    ap.add_argument("-a", "--auto", action="store_true", help="auto mode, no manual inputs")
    ap.add_argument("-b", "--bib", nargs='?', const='ref.bib', help="Download bibtex citation info into [ref.bib or provided file]")
    ap.add_argument("-d", "--doi", help="Use provided DOI to fetch metadata and modify pdf")

    ap.add_argument("-s", "--sources", action='extend', nargs='*', choices=['arxiv', 'crossref'], default=['arxiv', 'crossref'] )

    ap.add_argument("-nt", "--name-template", default="{year} - {author} - {title}.pdf", help="Name template for pdf filenames. Write metadata keys contained within {} for auto substitution.")

    ap.add_argument("-m", "--mode", choices=['classic', 'complete'], default='complete', help="Classic: Check in pdf meta only -> text only -> manual query\nComplete: Check in pdf meta+text -> manual query")

    args = ap.parse_args()

    # TODO: automate with inspect/importlib
    SOURCE_MAPPING = {
            'arxiv': arXiv,
            'crossref': CrossRef
            }

    args.sources = [ SOURCE_MAPPING[s] for s in args.sources ]

    if args.doi:
        assert len(args.files) == 1
        pdf = PDF(args.files[0], name_template=args.name_template)
        mdata = CrossRef.fetch_and_parse(args.doi)
        if mdata: 
            pdf.update_metadata(mdata)
            pdf.rename()
    else: 
        for current_file in args.files: 
            driver(current_file, **vars(args))

if __name__ == "__main__": 
    main()
